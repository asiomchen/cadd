#best verison - use it!!!!!!

import os
import subprocess
import warnings
from typing import Optional
from openbabel import pybel
from rdkit import Chem


def to_rdkit_mol(smiles: str, sanitize: bool = True) -> Optional[Chem.Mol]:
    """
    Convert smiles to rdkit molecule
    Args:
        smiles: smiles string
        sanitize: if True, the molecule is sanitized

    Returns: rdkit molecule

    """
    try:
        mol = Chem.MolFromSmiles(smiles)
        if sanitize:
            Chem.SanitizeMol(mol)
    except Exception as e:
        warnings.warn(f"Failed to convert {smiles} to rdkit molecule. {e}")
        return None
    return mol


def to_sdf(smiles: str, smiles_id: str, silent: bool = False):
    """
    Convert smiles to pdbqt file for Vina docking
    Args:
        smiles: smiles string
        smiles_id: name of the molecule
        inplace: if True, the converted file will be saved in the same directory as the original file
        silent: if False, exception is thrown when conversion fails. Otherwise, None is returned.

    Returns: None

    """
    try:
        # creates sdf 3d molecule from smiles using pybel
        sdf_mol = f"{smiles_id}.sdf"
        out = pybel.Outputfile(filename=sdf_mol, format='sdf', overwrite=True)
        mol = pybel.readstring(string=smiles, format='smiles')
        mol.title = smiles_id
        mol.addh()
        mol.make3D('mmff94s')
        mol.localopt(forcefield='mmff94s', steps=500)
        out.write(mol)
        out.close()
        cmd = "obabel " + sdf_mol + " -O " + sdf_mol + " -p 7.4"

        # protonates the molecule generated by pybel and saves it in the same sdf file
        obabel_return_code = subprocess.run(cmd, shell=True).returncode
        if obabel_return_code != 0:
            raise ValueError(f"Failed to protonate {smiles_id}.")

    except Exception as e:
        if silent:
            return None
        else:
            raise ValueError(e)
    return sdf_mol

def to_pdbqt(smiles: str, smiles_id: str, silent: bool = False):
    from deepchem.utils.rdkit_utils import load_molecule, write_molecule
    """
    Convert smiles to pdbqt file for Vina docking
    Args:
        smiles: smiles string
        smiles_id: name of the molecule
        inplace: if True, the converted file will be saved in the same directory as the original file
        silent: if False, exception is thrown when conversion fails. Otherwise, None is returned.

    Returns: None

    """
    try:
        # creates sdf 3d molecule from smiles using pybel
        sdf_mol = f"{smiles_id}.sdf"
        out = pybel.Outputfile(filename=sdf_mol, format='sdf', overwrite=True)
        mol = pybel.readstring(string=smiles, format='smiles')
        mol.title = smiles_id
        mol.addh()
        mol.make3D('mmff94')
        mol.localopt(forcefield='mmff94', steps=500)
        out.write(mol)
        out.close()
        cmd = "obabel " + sdf_mol + " -O " + sdf_mol + " -p 7.4"

        # protonates the molecule generated by pybel and saves it in the same sdf file
        obabel_return_code = subprocess.run(cmd, shell=True).returncode
        if obabel_return_code != 0:
            raise ValueError(f"Failed to protonate {smiles_id}.")

        # converts the sdf file to pdbqt file using deepchem because opebabel does not support preserve
        # hydrogens on carbon atoms
        output_filename = sdf_mol.replace(".sdf", ".pdbqt")
        ligand_mol = load_molecule(sdf_mol, calc_charges=True, add_hydrogens=False)
        write_molecule(ligand_mol[1], output_filename)
        os.remove(sdf_mol)
        fix_uppercase(output_filename)
    except Exception as e:
        if silent:
            return None
        else:
            raise ValueError(e)
    return output_filename


def fix_uppercase(file, pattern=(' Cl', ' Br')):
    """
    In case of the ligand pdbqt file has second uppercase letter in the atom names, which is unapropriate for vina
    Pattern ['CL', 'BR'] will be replaced by ['Cl', 'Br']
    Pattern always occurs at the end of the line.
    """
    with open(file, 'r') as f:
        lines = f.readlines()
    with open(file, 'w') as f:
        for line in lines:
            for p in pattern:
                line = line.replace(p.upper(), p)
            f.write(line)

if __name__ == "__main__":
    # os.chdir('/home/anton/in_dev/Docking_tools/master/ligands')
    # linker = 'NCCCCCCNC(=O)c1ccc(cc1)-c1c2ccc(n2)c(-c2c(F)c(F)c(F)c(F)c2F)c2ccc([nH]2)c(-c2c(F)c(F)c(F)c(F)c2F)c2ccc(n2)c(-c2c(F)c(F)c(F)c(F)c2F)c2ccc1[nH]2'
    # linker_id = 'pentafluoro_linker'
    # conjugate = 'COc1ccc2n(C(=O)c3ccc(Cl)cc3)c(C)c(CC(=O)NCCCCCCNC(=O)c3ccc(cc3)-c3c4ccc(n4)c(-c4c(F)c(F)c(F)c(F)c4F)c4ccc([nH]4)c(-c4c(F)c(F)c(F)c(F)c4F)c4ccc(n4)c(-c4c(F)c(F)c(F)c(F)c4F)c4ccc3[nH]4)c2c1'
    # conjugate_id = 'pentafluoro_conjugate_ind'
    # orig = 'O=C2OCC(=C2\c1ccccc1)\c3ccc(cc3)S(=O)(=O)C'
    # ind_con ='COc1ccc2c(c1)c(CC(=O)NCCCCCCNC(=O)c1ccc(-c3c4nc(c(-c5c(F)c(F)c(F)c(F)c5F)c5ccc([nH]5)c(-c5c(F)c(F)c(F)c(F)c5F)c5nc(c(-c6c(F)c(F)c(F)c(F)c6F)c6ccc3[nH]6)C=C5)C=C4)cc1)c(C)n2C(=O)c1ccc(Cl)cc1'
    to_sdf(
        'COc1ccc2c(c1)c(CC(=O)NCCCCCCNC(=O)c1ccc(-c3c4nc(c(-c5c(F)c(F)c(F)c(F)c5F)c5ccc([nH]5)c(-c5c(F)c(F)c(F)c(F)c5F)c5nc(c(-c6c(F)c(F)c(F)c(F)c6F)c6ccc3[nH]6)C=C5)C=C4)cc1)c(C)n2C(=O)c1ccc(Cl)cc1',
        'ind_conj')
